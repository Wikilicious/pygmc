import datetime

# recorded on GMC500+, middle point start data and abrupt end,
# a few reference times, and some notes, 110 char long.
raw_history_with_notes1 = b"\x0c,5U\xaa\x05U\xaa\x00\x14\x07\x1a\x0c,6U\xaa\x00U\xaa\x00\x14\x07\x1a\x0c,6U\xaa\x01U\xaa\x00\x14\x07\x1a\x0c,7U\xaa\x02BX`][sYM[JSWXVBU\xaa\x00\x14\x07\x1a\r\x00\x1aU\xaa\x02U\xaa\x02\x05&5ABC?lpn\x80U\xaa\x00\x14\x07\x1a\r\x05&U\xaa\x02U\xaa\x02\x03ABCs\xa3t\x95\x95\x8fq\xa6"


raw_history_with_notes1_tidy = [
    (
        datetime.datetime(2020, 7, 26, 12, 45, 55),
        66,
        "CPM",
        "every minute",
        datetime.datetime(2020, 7, 26, 12, 44, 55),
        None,
    ),
    (
        datetime.datetime(2020, 7, 26, 12, 46, 55),
        88,
        "CPM",
        "every minute",
        datetime.datetime(2020, 7, 26, 12, 44, 55),
        None,
    ),
    (
        datetime.datetime(2020, 7, 26, 12, 47, 55),
        96,
        "CPM",
        "every minute",
        datetime.datetime(2020, 7, 26, 12, 44, 55),
        None,
    ),
    (
        datetime.datetime(2020, 7, 26, 12, 48, 55),
        93,
        "CPM",
        "every minute",
        datetime.datetime(2020, 7, 26, 12, 44, 55),
        None,
    ),
    (
        datetime.datetime(2020, 7, 26, 12, 49, 55),
        91,
        "CPM",
        "every minute",
        datetime.datetime(2020, 7, 26, 12, 44, 55),
        None,
    ),
    (
        datetime.datetime(2020, 7, 26, 12, 50, 55),
        115,
        "CPM",
        "every minute",
        datetime.datetime(2020, 7, 26, 12, 44, 55),
        None,
    ),
    (
        datetime.datetime(2020, 7, 26, 12, 51, 55),
        89,
        "CPM",
        "every minute",
        datetime.datetime(2020, 7, 26, 12, 44, 55),
        None,
    ),
    (
        datetime.datetime(2020, 7, 26, 12, 52, 55),
        77,
        "CPM",
        "every minute",
        datetime.datetime(2020, 7, 26, 12, 44, 55),
        None,
    ),
    (
        datetime.datetime(2020, 7, 26, 12, 53, 55),
        91,
        "CPM",
        "every minute",
        datetime.datetime(2020, 7, 26, 12, 44, 55),
        None,
    ),
    (
        datetime.datetime(2020, 7, 26, 12, 54, 55),
        74,
        "CPM",
        "every minute",
        datetime.datetime(2020, 7, 26, 12, 44, 55),
        None,
    ),
    (
        datetime.datetime(2020, 7, 26, 12, 55, 55),
        83,
        "CPM",
        "every minute",
        datetime.datetime(2020, 7, 26, 12, 44, 55),
        None,
    ),
    (
        datetime.datetime(2020, 7, 26, 12, 56, 55),
        87,
        "CPM",
        "every minute",
        datetime.datetime(2020, 7, 26, 12, 44, 55),
        None,
    ),
    (
        datetime.datetime(2020, 7, 26, 12, 57, 55),
        88,
        "CPM",
        "every minute",
        datetime.datetime(2020, 7, 26, 12, 44, 55),
        None,
    ),
    (
        datetime.datetime(2020, 7, 26, 12, 58, 55),
        86,
        "CPM",
        "every minute",
        datetime.datetime(2020, 7, 26, 12, 44, 55),
        None,
    ),
    (
        datetime.datetime(2020, 7, 26, 12, 59, 55),
        66,
        "CPM",
        "every minute",
        datetime.datetime(2020, 7, 26, 12, 44, 55),
        None,
    ),
    (
        datetime.datetime(2020, 7, 26, 13, 1, 26),
        63,
        "CPM",
        "every minute",
        datetime.datetime(2020, 7, 26, 13, 0, 26),
        "&5ABC",
    ),
    (
        datetime.datetime(2020, 7, 26, 13, 2, 26),
        108,
        "CPM",
        "every minute",
        datetime.datetime(2020, 7, 26, 13, 0, 26),
        None,
    ),
    (
        datetime.datetime(2020, 7, 26, 13, 3, 26),
        112,
        "CPM",
        "every minute",
        datetime.datetime(2020, 7, 26, 13, 0, 26),
        None,
    ),
    (
        datetime.datetime(2020, 7, 26, 13, 4, 26),
        110,
        "CPM",
        "every minute",
        datetime.datetime(2020, 7, 26, 13, 0, 26),
        None,
    ),
    (
        datetime.datetime(2020, 7, 26, 13, 5, 26),
        128,
        "CPM",
        "every minute",
        datetime.datetime(2020, 7, 26, 13, 0, 26),
        None,
    ),
    (
        datetime.datetime(2020, 7, 26, 13, 6, 38),
        115,
        "CPM",
        "every minute",
        datetime.datetime(2020, 7, 26, 13, 5, 38),
        "ABC",
    ),
    (
        datetime.datetime(2020, 7, 26, 13, 7, 38),
        163,
        "CPM",
        "every minute",
        datetime.datetime(2020, 7, 26, 13, 5, 38),
        None,
    ),
    (
        datetime.datetime(2020, 7, 26, 13, 8, 38),
        116,
        "CPM",
        "every minute",
        datetime.datetime(2020, 7, 26, 13, 5, 38),
        None,
    ),
    (
        datetime.datetime(2020, 7, 26, 13, 9, 38),
        149,
        "CPM",
        "every minute",
        datetime.datetime(2020, 7, 26, 13, 5, 38),
        None,
    ),
    (
        datetime.datetime(2020, 7, 26, 13, 10, 38),
        149,
        "CPM",
        "every minute",
        datetime.datetime(2020, 7, 26, 13, 5, 38),
        None,
    ),
    (
        datetime.datetime(2020, 7, 26, 13, 11, 38),
        143,
        "CPM",
        "every minute",
        datetime.datetime(2020, 7, 26, 13, 5, 38),
        None,
    ),
    (
        datetime.datetime(2020, 7, 26, 13, 12, 38),
        113,
        "CPM",
        "every minute",
        datetime.datetime(2020, 7, 26, 13, 5, 38),
        None,
    ),
    (
        datetime.datetime(2020, 7, 26, 13, 13, 38),
        166,
        "CPM",
        "every minute",
        datetime.datetime(2020, 7, 26, 13, 5, 38),
        None,
    ),
]


# Same as test above... but added
raw_history_with_notes2 = raw_history_with_notes1 + b"".join(
    [b"\xff" for i in range(101)]
)


#######################################################################################
# several save modes and double byte counts
raw_history_with_save_modes = b"U\xaa\x00\x18\x01\x19\x15\x05\x0cU\xaa\x02\x13U\xaa\x00\x18\x01\x19\x15\x06)U\xaa\x02U\xaa\x02\x04TEST\x12U\xaa\x01\x03\xca\x91U\xaa\x01\x03\x91U\xaa\x00\x18\x01\x19\x15\n\rU\xaa\x02U\xaa\x02\x04TESTU\xaa\x00\x18\x01\x19\x15\n\x0eU\xaa\x03U\xaa\x02\x04TESTU\xaa\x00\x18\x01\x19\x15\n\x14U\xaa\x03U\xaa\x02\x04TESTU\xaa\x00\x18\x01\x19\x15\n\x15U\xaa\x04U\xaa\x02\x04TESTU\xaa\x00\x18\x01\x19\x15\n'U\xaa\x04U\xaa\x02\x04TEST\x13\r\x07\t\x06\x0e\x10\x0b\n\r\t\r\x0e\x06\n\x0c\x0b\t\x06\n\x04\x00U\xaa\x00\x18\x01\x19\x15\x0b\x08U\xaa\x04U\xaa\x02\x04TESTU\xaa\x00\x18\x01\x19\x15\x0b\x0bU\xaa\x05U\xaa\x02\x04TESTU\xaa\x01\x02\xe9U\xaa\x01\x02\xe8U\xaa\x00\x18\x01\x19\x15\r\x16U\xaa\x05U\xaa\x02\x04TESTU\xaa\x00\x18\x01\x19\x15\r\x18U\xaa\x00U\xaa\x02\x04TESTU\xaa\x00\x18\x01\x19\x15\r\x19U\xaa\x01U\xaa\x02\x04TEST\x00\x01U\xaa\x00\x18\x01\x19\x15\r\x1bU\xaa\x02U\xaa\x02\x04TESTU\xaa\x00\x18\x01\x19\x15\r\x1cU\xaa\x03U\xaa\x02\x04TESTU\xaa\x00\x18\x01\x19\x15\r\x1dU\xaa\x04U\xaa\x02\x04TESTU\xaa\x00\x18\x01\x19\x15\r\x1fU\xaa\x05U\xaa\x02\x04TESTU\xaa\x00\x18\x01\x19\x15\r!U\xaa\x00U\xaa\x02\x04TESTU\xaa\x00\x18\x01\x19\x15\x0f\tU\xaa\x00U\xaa\x02\x04TESTU\xaa\x00\x18\x01\x19\x15\x0f\nU\xaa\x01U\xaa\x02\x04TEST\x00U\xaa\x00\x18\x01\x19\x15\x0f\x0bU\xaa\x02U\xaa\x02\x04TESTU\xaa\x00\x18\x01\x19\x15\x0f\x0cU\xaa\x03U\xaa\x02\x04TESTU\xaa\x01\x03RU\xaa\x00\x18\x01\x19\x16\x0f\x0cU\xaa\x03U\xaa\x02\x04TESTU\xaa\x01\x03aU\xaa\x00\x18\x01\x19\x17\x0f\rU\xaa\x03U\xaa\x02\x04TESTU\xaa\x01\x03_U\xaa\x00\x18\x01\x1a\x00\x0f\x0fU\xaa\x03U\xaa\x02\x04TESTU\xaa\x01\x03aU\xaa\x00\x18\x01\x1a\x01\x0f\x10U\xaa\x03U\xaa\x02\x04TESTU\xaa\x01\x03eU\xaa\x00\x18\x01\x1a\x02\x0f\x12U\xaa\x03U\xaa\x02\x04TESTU\xaa\x01\x03bU\xaa\x00\x18\x01\x1a\x03\x0f\x13U\xaa\x03U\xaa\x02\x04TESTU\xaa\x01\x03iU\xaa\x00\x18\x01\x1a\x04\x0f\x15U\xaa\x03U\xaa\x02\x04TESTU\xaa\x01\x03^U\xaa\x00\x18\x01\x1a\x05\x0f\x16U\xaa\x03U\xaa\x02\x04TESTU\xaa\x01\x03hU\xaa\x00\x18\x01\x1a\x06\x0f\x18U\xaa\x03U\xaa\x02\x04TESTU\xaa\x01\x03dU\xaa\x00\x18\x01\x1a\x07\x0f\x19U\xaa\x03U\xaa\x02\x04TESTU\xaa\x01\x03fU\xaa\x00\x18\x01\x1a\x08\x0f\x1aU\xaa\x03U\xaa\x02\x04TESTU\xaa\x01\x03dU\xaa\x00\x18\x01\x1a\t\x0f\x1cU\xaa\x03U\xaa\x02\x04TESTU\xaa\x01\x03dU\xaa\x00\x18\x01\x1a\n\x0f\x1dU\xaa\x03U\xaa\x02\x04TESTU\xaa\x01\x03]U\xaa\x00\x18\x01\x1a\x0b\x0f\x1fU\xaa\x03U\xaa\x02\x04TESTU\xaa\x01\x03hU\xaa\x00\x18\x01\x1a\x0c\x0f U\xaa\x03U\xaa\x02\x04TESTU\xaa\x01\x03dU\xaa\x00\x18\x01\x1a\r\x0f\"U\xaa\x03U\xaa\x02\x04TESTU\xaa\x01\x03aU\xaa\x00\x18\x01\x1a\x0e\x0f#U\xaa\x03U\xaa\x02\x04TESTU\xaa\x01\x03_U\xaa\x00\x18\x01\x1a\x0f\x0f$U\xaa\x03U\xaa\x02\x04TESTU\xaa\x01\x03eU\xaa\x00\x18\x01\x1a\x10\x0f&U\xaa\x03U\xaa\x02\x04TESTU\xaa\x01\x03hU\xaa\x00\x18\x01\x1a\x11\x0f'U\xaa\x03U\xaa\x02\x04TESTU\xaa\x01\x03aU\xaa\x00\x18\x01\x1a\x12\x0f)U\xaa\x03U\xaa\x02\x04TESTU\xaa\x01\x03dU\xaa\x00\x18\x01\x1a\x13\x0f*U\xaa\x03U\xaa\x02\x04TEST"

raw_history_with_save_modes_tidy = [
    (
        datetime.datetime(2024, 1, 25, 21, 6, 12),
        19,
        "CPM",
        "every minute",
        datetime.datetime(2024, 1, 25, 21, 5, 12),
        None,
    ),
    (
        datetime.datetime(2024, 1, 25, 21, 7, 41),
        18,
        "CPM",
        "every minute",
        datetime.datetime(2024, 1, 25, 21, 6, 41),
        "TEST",
    ),
    (
        datetime.datetime(2024, 1, 25, 21, 8, 41),
        970,
        "CPM",
        "every minute",
        datetime.datetime(2024, 1, 25, 21, 6, 41),
        None,
    ),
    (
        datetime.datetime(2024, 1, 25, 21, 9, 41),
        145,
        "CPM",
        "every minute",
        datetime.datetime(2024, 1, 25, 21, 6, 41),
        None,
    ),
    (
        datetime.datetime(2024, 1, 25, 21, 10, 41),
        913,
        "CPM",
        "every minute",
        datetime.datetime(2024, 1, 25, 21, 6, 41),
        None,
    ),
    (
        datetime.datetime(2024, 1, 25, 21, 10, 40),
        19,
        "CPS",
        "every second - threshold",
        datetime.datetime(2024, 1, 25, 21, 10, 39),
        "TEST",
    ),
    (
        datetime.datetime(2024, 1, 25, 21, 10, 41),
        13,
        "CPS",
        "every second - threshold",
        datetime.datetime(2024, 1, 25, 21, 10, 39),
        None,
    ),
    (
        datetime.datetime(2024, 1, 25, 21, 10, 42),
        7,
        "CPS",
        "every second - threshold",
        datetime.datetime(2024, 1, 25, 21, 10, 39),
        None,
    ),
    (
        datetime.datetime(2024, 1, 25, 21, 10, 43),
        9,
        "CPS",
        "every second - threshold",
        datetime.datetime(2024, 1, 25, 21, 10, 39),
        None,
    ),
    (
        datetime.datetime(2024, 1, 25, 21, 10, 44),
        6,
        "CPS",
        "every second - threshold",
        datetime.datetime(2024, 1, 25, 21, 10, 39),
        None,
    ),
    (
        datetime.datetime(2024, 1, 25, 21, 10, 45),
        14,
        "CPS",
        "every second - threshold",
        datetime.datetime(2024, 1, 25, 21, 10, 39),
        None,
    ),
    (
        datetime.datetime(2024, 1, 25, 21, 10, 46),
        16,
        "CPS",
        "every second - threshold",
        datetime.datetime(2024, 1, 25, 21, 10, 39),
        None,
    ),
    (
        datetime.datetime(2024, 1, 25, 21, 10, 47),
        11,
        "CPS",
        "every second - threshold",
        datetime.datetime(2024, 1, 25, 21, 10, 39),
        None,
    ),
    (
        datetime.datetime(2024, 1, 25, 21, 10, 48),
        10,
        "CPS",
        "every second - threshold",
        datetime.datetime(2024, 1, 25, 21, 10, 39),
        None,
    ),
    (
        datetime.datetime(2024, 1, 25, 21, 10, 49),
        13,
        "CPS",
        "every second - threshold",
        datetime.datetime(2024, 1, 25, 21, 10, 39),
        None,
    ),
    (
        datetime.datetime(2024, 1, 25, 21, 10, 50),
        9,
        "CPS",
        "every second - threshold",
        datetime.datetime(2024, 1, 25, 21, 10, 39),
        None,
    ),
    (
        datetime.datetime(2024, 1, 25, 21, 10, 51),
        13,
        "CPS",
        "every second - threshold",
        datetime.datetime(2024, 1, 25, 21, 10, 39),
        None,
    ),
    (
        datetime.datetime(2024, 1, 25, 21, 10, 52),
        14,
        "CPS",
        "every second - threshold",
        datetime.datetime(2024, 1, 25, 21, 10, 39),
        None,
    ),
    (
        datetime.datetime(2024, 1, 25, 21, 10, 53),
        6,
        "CPS",
        "every second - threshold",
        datetime.datetime(2024, 1, 25, 21, 10, 39),
        None,
    ),
    (
        datetime.datetime(2024, 1, 25, 21, 10, 54),
        10,
        "CPS",
        "every second - threshold",
        datetime.datetime(2024, 1, 25, 21, 10, 39),
        None,
    ),
    (
        datetime.datetime(2024, 1, 25, 21, 10, 55),
        12,
        "CPS",
        "every second - threshold",
        datetime.datetime(2024, 1, 25, 21, 10, 39),
        None,
    ),
    (
        datetime.datetime(2024, 1, 25, 21, 10, 56),
        11,
        "CPS",
        "every second - threshold",
        datetime.datetime(2024, 1, 25, 21, 10, 39),
        None,
    ),
    (
        datetime.datetime(2024, 1, 25, 21, 10, 57),
        9,
        "CPS",
        "every second - threshold",
        datetime.datetime(2024, 1, 25, 21, 10, 39),
        None,
    ),
    (
        datetime.datetime(2024, 1, 25, 21, 10, 58),
        6,
        "CPS",
        "every second - threshold",
        datetime.datetime(2024, 1, 25, 21, 10, 39),
        None,
    ),
    (
        datetime.datetime(2024, 1, 25, 21, 10, 59),
        10,
        "CPS",
        "every second - threshold",
        datetime.datetime(2024, 1, 25, 21, 10, 39),
        None,
    ),
    (
        datetime.datetime(2024, 1, 25, 21, 11),
        4,
        "CPS",
        "every second - threshold",
        datetime.datetime(2024, 1, 25, 21, 10, 39),
        None,
    ),
    (
        datetime.datetime(2024, 1, 25, 21, 11, 1),
        0,
        "CPS",
        "every second - threshold",
        datetime.datetime(2024, 1, 25, 21, 10, 39),
        None,
    ),
    (
        datetime.datetime(2024, 1, 25, 21, 12, 11),
        745,
        "CPM",
        "every minute - threshold",
        datetime.datetime(2024, 1, 25, 21, 11, 11),
        "TEST",
    ),
    (
        datetime.datetime(2024, 1, 25, 21, 13, 11),
        744,
        "CPM",
        "every minute - threshold",
        datetime.datetime(2024, 1, 25, 21, 11, 11),
        None,
    ),
    (
        datetime.datetime(2024, 1, 25, 21, 13, 26),
        0,
        "CPS",
        "every second",
        datetime.datetime(2024, 1, 25, 21, 13, 25),
        "TEST",
    ),
    (
        datetime.datetime(2024, 1, 25, 21, 13, 27),
        1,
        "CPS",
        "every second",
        datetime.datetime(2024, 1, 25, 21, 13, 25),
        None,
    ),
    (
        datetime.datetime(2024, 1, 25, 21, 15, 11),
        0,
        "CPS",
        "every second",
        datetime.datetime(2024, 1, 25, 21, 15, 10),
        "TEST",
    ),
    (
        datetime.datetime(2024, 1, 25, 22, 15, 12),
        850,
        "CPM",
        "every hour",
        datetime.datetime(2024, 1, 25, 21, 15, 12),
        "TEST",
    ),
    (
        datetime.datetime(2024, 1, 25, 23, 15, 12),
        865,
        "CPM",
        "every hour",
        datetime.datetime(2024, 1, 25, 22, 15, 12),
        "TEST",
    ),
    (
        datetime.datetime(2024, 1, 26, 0, 15, 13),
        863,
        "CPM",
        "every hour",
        datetime.datetime(2024, 1, 25, 23, 15, 13),
        "TEST",
    ),
    (
        datetime.datetime(2024, 1, 26, 1, 15, 15),
        865,
        "CPM",
        "every hour",
        datetime.datetime(2024, 1, 26, 0, 15, 15),
        "TEST",
    ),
    (
        datetime.datetime(2024, 1, 26, 2, 15, 16),
        869,
        "CPM",
        "every hour",
        datetime.datetime(2024, 1, 26, 1, 15, 16),
        "TEST",
    ),
    (
        datetime.datetime(2024, 1, 26, 3, 15, 18),
        866,
        "CPM",
        "every hour",
        datetime.datetime(2024, 1, 26, 2, 15, 18),
        "TEST",
    ),
    (
        datetime.datetime(2024, 1, 26, 4, 15, 19),
        873,
        "CPM",
        "every hour",
        datetime.datetime(2024, 1, 26, 3, 15, 19),
        "TEST",
    ),
    (
        datetime.datetime(2024, 1, 26, 5, 15, 21),
        862,
        "CPM",
        "every hour",
        datetime.datetime(2024, 1, 26, 4, 15, 21),
        "TEST",
    ),
    (
        datetime.datetime(2024, 1, 26, 6, 15, 22),
        872,
        "CPM",
        "every hour",
        datetime.datetime(2024, 1, 26, 5, 15, 22),
        "TEST",
    ),
    (
        datetime.datetime(2024, 1, 26, 7, 15, 24),
        868,
        "CPM",
        "every hour",
        datetime.datetime(2024, 1, 26, 6, 15, 24),
        "TEST",
    ),
    (
        datetime.datetime(2024, 1, 26, 8, 15, 25),
        870,
        "CPM",
        "every hour",
        datetime.datetime(2024, 1, 26, 7, 15, 25),
        "TEST",
    ),
    (
        datetime.datetime(2024, 1, 26, 9, 15, 26),
        868,
        "CPM",
        "every hour",
        datetime.datetime(2024, 1, 26, 8, 15, 26),
        "TEST",
    ),
    (
        datetime.datetime(2024, 1, 26, 10, 15, 28),
        868,
        "CPM",
        "every hour",
        datetime.datetime(2024, 1, 26, 9, 15, 28),
        "TEST",
    ),
    (
        datetime.datetime(2024, 1, 26, 11, 15, 29),
        861,
        "CPM",
        "every hour",
        datetime.datetime(2024, 1, 26, 10, 15, 29),
        "TEST",
    ),
    (
        datetime.datetime(2024, 1, 26, 12, 15, 31),
        872,
        "CPM",
        "every hour",
        datetime.datetime(2024, 1, 26, 11, 15, 31),
        "TEST",
    ),
    (
        datetime.datetime(2024, 1, 26, 13, 15, 32),
        868,
        "CPM",
        "every hour",
        datetime.datetime(2024, 1, 26, 12, 15, 32),
        "TEST",
    ),
    (
        datetime.datetime(2024, 1, 26, 14, 15, 34),
        865,
        "CPM",
        "every hour",
        datetime.datetime(2024, 1, 26, 13, 15, 34),
        "TEST",
    ),
    (
        datetime.datetime(2024, 1, 26, 15, 15, 35),
        863,
        "CPM",
        "every hour",
        datetime.datetime(2024, 1, 26, 14, 15, 35),
        "TEST",
    ),
    (
        datetime.datetime(2024, 1, 26, 16, 15, 36),
        869,
        "CPM",
        "every hour",
        datetime.datetime(2024, 1, 26, 15, 15, 36),
        "TEST",
    ),
    (
        datetime.datetime(2024, 1, 26, 17, 15, 38),
        872,
        "CPM",
        "every hour",
        datetime.datetime(2024, 1, 26, 16, 15, 38),
        "TEST",
    ),
    (
        datetime.datetime(2024, 1, 26, 18, 15, 39),
        865,
        "CPM",
        "every hour",
        datetime.datetime(2024, 1, 26, 17, 15, 39),
        "TEST",
    ),
    (
        datetime.datetime(2024, 1, 26, 19, 15, 41),
        868,
        "CPM",
        "every hour",
        datetime.datetime(2024, 1, 26, 18, 15, 41),
        "TEST",
    ),
]
